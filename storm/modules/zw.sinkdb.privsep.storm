// Name of the dictionary key used to store the SinkDB HTTPS API key
$apiKeyName = "zw.sinkdb:https-apikey"

// Name of the dictionary key to store the SinkDB tag prefix
$tagPrefixKeyName = "zw.sinkdb:tag-prefix"

// Get the SinkDB HTTPS API key
// Args: n/a
// Returns: str (the API key)
function getApiKey() {
    // see if the user has their own key set
    $apikey = $lib.user.vars.get($apiKeyName)
    if ($apikey) {
        return($apikey)
    }

    // no user key, check for global
    $apikey = $lib.globals.get($apiKeyName)
    if ($apikey) {
        return($apikey)
    }

    // no key in either, bail
    $lib.exit("SinkDB HTTPS API key is not set. Use zw.sinkdb.setup.apikey to set one.")
}

// Set the SinkDB HTTPS API key
// Args:
//  - key (str): the API key to save
//  - user (bool): if true, key will be stored to user vars instead of globals
// Returns: n/a
function setApiKey(key, user) {
    if ($user) {
        $lib.user.vars.set($apiKeyName, $key)
    } else {
        $lib.globals.set($apiKeyName, $key)
    }
}

// Get the SinkDB tag prefix
// Args: n/a
// Returns: str (the tag prefix)
function getTagPrefix() {
    return($lib.globals.get($tagPrefixKeyName, default=rep.sinkdb))
}

// Set the SinkDB tag prefix
// Args:
//  - prefix (str): the tag prefix to save
// Returns: n/a
function setTagPrefix(prefix) {
    ($ok, $norm) = $lib.trycast(syn:tag:part, $prefix)
    if (not $ok) {
        $lib.warn("failed to set tag prefix, invalid value: {s}", s=$prefix)
        return($lib.null)
    }

    $lib.globals.set($tagPrefixKeyName, $prefix)
}

// Make an API call to SinkDB
// Args
//   - $querystr (str): Query string to append to the POST body (which this function will add the API key to)
// Returns: prim (JSON dictionary) or $lib.false
function makeSinkdbApiCall(querystr, asof) {
    $cachedData = $lib.jsonstor.cacheget("zw.sinkdb.http", $querystr, $asof)
    if ($cachedData) {
        if $lib.debug { $lib.print("using cached data for http query: {s}", s=$querystr) }
        return($cachedData)
    }

    $body = $lib.str.format("api_key={k}&{b}", k=$getApiKey(), b=$querystr)

    $resp = $lib.inet.http.post("https://sinkdb-api.abuse.ch/api/v1/", headers=({"content-type": "application/x-www-form-urlencoded"}), body=$body)
    if ($resp.code != 200) { return($lib.false) }

    $j = $resp.json()
    $ret = $lib.jsonstor.cacheset("zw.sinkdb.http", $querystr, $j)
    if $lib.debug { $lib.print("wrote http query cache data for {s}: {r}", s=$querystr, r=$ret) }

    return($j)
}

// Get the proper meta:source node for SinkDB
// Args: n/a
// Returns: meta:source node
function getMetaSource() {
    [ meta:source=$modconf.source :name="sinkdb" ]
    return($node)
}

// Model the response for a sinkdb entry
// Args:
//   - $node: node to model tags on
//   - $data: dict of data from SinkDB
// Returns: n/a
function modelLookupResponse(node, data) {
    ($ok, $src) = $lib.trycast(syn:tag:part, $data.source)
    if (not $ok) {
        $lib.warn("failed to model {ioc}, couldn't norm source: {d}", ioc=$data.indicator, d=$data.source)
        return()
    }
    ($ok, $class) = $lib.trycast(syn:tag:part, $data.classification)
    if (not $ok) {
        $lib.warn("failed to model {ioc}, couldn't norm classification: {d}", ioc=$data.indicator, d=$data.classification)
        return()
    }
    ($ok, $type) = $lib.trycast(syn:tag:part, $data.type)
    if (not $ok) {
        $lib.warn("failed to model {ioc}, couldn't norm type: {d}", ioc=$data.indicator, d=$data.type)
        return()
    }
    
    $ts = $lib.time.parse($data.date_added, "%Y-%m-%d %H:%M:%S UTC")
    $now = $lib.time.now()
    $srcnode = $getMetaSource()

    $prefix = $getTagPrefix()

    $tags = ([$src, $lib.str.concat(class., $class), $lib.str.concat(type., $type)])
    if ($data.expose_org = 1) { $tags.append(has_operator) }
    if ($data.expose_vend = 1) { $tags.append(expose.vendor) }
    if ($data.lea_only = 1) { $tags.append(expose.lea) }

    // add tags to the indicator
    // TODO: should we be removing things that are no longer true, or allow the analyst to derive the current state based on the timestamps?
    yield $node | { for $tag in $tags {
        $t = $lib.str.join('.', ($prefix, $tag))
        if ($t.endswith($src)) {[+#$t=($ts,$now)]}
        else {[+#$t=$now]}
    } }

    // add edge to the meta:source node
    [ <(seen)+ { yield $srcnode }]

    if ($data.expose_org = 1 and $data.operator) {
        // add a ps:contact node for the operator
        $t = $lib.str.concat($prefix, ".operator")
        $g = $lib.guid(zw,sinkdb,$data.operator)
        [ <(has)+ {[ ps:contact=$g :name=$data.operator :type=zw.sinkdb.operator +#$t ]} ]
        { spin | ps:contact=$g [<(seen)+ { yield $srcnode }] }
    }

    fini { return() }
}

// Model an IPv4 range from SinkDB
// Args:
//   - d: dict of data from SinkDB
// Returns: n/a
function __modelIpv4Range(d) {
    $size = $lib.cast(int, $d.indicator.split("/").1)
    if ($size >= 24) {
        if $lib.debug { $lib.print("making inet:ipv4 nodes for {i}", i=$d.indicator) }
        [inet:ipv4=$d.indicator]
    }
                
    [inet:cidr4=$d.indicator] { $modelLookupResponse($node, $d) }
}

// Model an IPv6 range from SinkDB
// Args:
//   - d: dict of data from SinkDB
// Returns: n/a
function __modelIPv6Range(d) {
    // sinkdb doesn't validate that ipv6 ranges don't have host bits set
    // remove them if they are
    $ioc = $lib.regex.replace("::[0-9a-f]+", "::", $d.indicator)
    if ($lib.debug and $ioc != $d.indicator) { $lib.print("removed host bits from {i}", i=$d.indicator) }

    $size = $lib.cast(int, $ioc.split("/").1)
    if ($size >= 120) {
        if $lib.debug { $lib.print("making inet:ipv6 nodes for {i}", i=$d.indicator) }
        [inet:ipv6=$ioc]
    }
                
    [inet:cidr6=$ioc] { $modelLookupResponse($node, $d) }
}

// Model the exported data from SinkDB. Creates nodes.
// Args:
//   - $data: list of dicts of data from SinkDB
// Yields nodes
function modelExportResponse(data) {
    init { $count = 0 }

    for $d in $data {
        if $lib.debug { $lib.print("modeling {i} (type: {t})", i=$d.indicator, t=$d.type) }

        switch $d.type {
            "ipv4": { [inet:ipv4=$d.indicator] { $modelLookupResponse($node, $d) } }
            "ipv6": { [inet:ipv6=$d.indicator] { $modelLookupResponse($node, $d) } }
            "ipv4_range": { yield $__modelIpv4Range($d) }
            "ipv6_range": { yield $__modelIPv6Range($d) }
            "domain_soa": {
                if ($d.indicator.find("@") != $lib.null) {
                    [inet:email=$d.indicator] { $modelLookupResponse($node, $d) }
                } else {
                    [inet:fqdn=$d.indicator] { $modelLookupResponse($node, $d) }
                }
            }
            "whois_email": { [inet:email=$d.indicator] { $modelLookupResponse($node, $d) } }
            "nameserver": { [inet:fqdn=$d.indicator] { $modelLookupResponse($node, $d) } }
            "web_url": { [inet:url=$d.indicator] { $modelLookupResponse($node, $d) } }
            "web_domain": {
                // they put multiple comma delimited IOCs in here sometimes
                for $part in $d.indicator.split(", ") {
                    // sometimes this has fqdns and IP address, no clue why
                    try {
                        [inet:fqdn=$part] { $modelLookupResponse($node, $d) }
                    } catch BadTypeValu as err {
                        [inet:ipv4=$part] { $modelLookupResponse($node, $d) }
                    }
                }
            }
            "email_from": { [inet:email=$d.indicator] { $modelLookupResponse($node, $d) } }
            "sending_ipv4": { [inet:ipv4=$d.indicator] { $modelLookupResponse($node, $d) } }
            "sending_ipv4_range": { yield $__modelIpv4Range($d) }
            "web_ipv4": { [inet:ipv4=$d.indicator] { $modelLookupResponse($node, $d) } }
            "sending_ipv6": { [inet:ipv6=$d.indicator] { $modelLookupResponse($node, $d) } }
            "sending_ipv6_range": { yield $__modelIPv6Range($d) }
            "web_ipv6": { [inet:ipv6=$d.indicator] { $modelLookupResponse($node, $d) } }
            "email_subject": { [it:dev:str=$d.indicator] { $modelLookupResponse($node, $d) } }
            "email_from_name": { [it:dev:str=$d.indicator] { $modelLookupResponse($node, $d) } }
            *: {
                $lib.warn("got an unsupported indicator type from sinkdb: {s}", s=$d.type)
                continue
            }
        }

        $count = ($count + 1)
    }

    // not foolproof, a big cidr mask will blow the count up, but a good sanity check
    fini {
        if ($data.size() > $count) {
            $lib.warn("tried to model {i} records but only could do {j} nodes", i=$data.size(), j=$count)
        } else {
            if $lib.debug { $lib.print("modeled {d} nodes", d=$count) }
        }
    }
}